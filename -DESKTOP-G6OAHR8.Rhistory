install.packages("devtools")
library(devtools)
check()
install.packages("Hmisc")
check()
install()
load_all()
simulate()
simulate
load_all()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
stop <- read.csv("C:\Users\roger\OneDrive - Harvard University\Gformula work\SToP.csv")
stop <- read.csv("C:/Users/roger/OneDrive - Harvard University/Gformula work/SToP.csv")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/my_helper_fucntions_RWL.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
load_all()
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
load_all()
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
load_all()
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/my_helper_fucntions_RWL.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/my_helper_fucntions_RWL.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/my_helper_fucntions_RWL.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/my_helper_fucntions_RWL.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
View(g.results.test)
View(g.results.test)
g.results.test
help("system.time")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
my.time
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/simulate.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/bootstrap.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
View(g.results.test)
View(g.results.test)
g.results.test
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/GitHub files/gfoRmula/R/gformula.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
install.packages("profvis")
install.packages("profvis")
library(profvis)
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
profvis::profvis({
#################################################################################
###    Advanced Confounding Adjustment                                        ###
###    Hands-on Session 8 - ESTIMATING THE EFFECT OF A DYNAMIC INTERVENTION   ###
###                         VIA THE PARAMETRIC G-FORMULA                      ###
###    Summer 2023                                                            ###
###    CAUSALab                                                               ###
#################################################################################
# Loading packages
library('readr')
library('tidyverse')
library('data.table')
library('splines')
##library('speedglm')
##library('survival')
##library('gfoRmula')
# Set working directory
##setwd("/path_to_your_data")
# [EDIT] - Update path to the location where your data and results will be stored
# Import data
my.data <- fread("C:/Users/roger/OneDrive - Harvard University/Gformula work/SToP.csv")
#################################################################################
###                                                                           ###
###     DATA ANALYSIS EXERCISE 1                                              ###
###                                                                           ###
#################################################################################
# Specifying the treatment strategies under comparison
# A custom function to define a given treatment strategy will have 6 arguments:
#  - newdf: a data.table containing the simulated dataset at time t
#  - pool: a data.table containing the simulated dataset at times prior to t
#  - intvar: the name of the time-varying covariate to intervene on
#  - intvals: a list of one or more values needed internally by the intervention
#             function
#  - time_name: the name of the time variable
#  - t: the current time index
# Function for never take statins unless indicated
dynamic_never <- function(newdf, pool, intvar, intvals, time_name, t){
# Define "threshold" as the cut-off value for which an individual would be
# clinically indicated to stop never taking statins
threshold <- intvals
# First, need to create a variable that determines whether individual
# ever has LDL >= 190 mg/dL. We'll do this by creating a time-updated
# variable called cond_met_ever (1: yes, 0: no)
if (t==0){
# At time 0, if ldl >= threshold value (i.e., 190 mg/dL which will be
# specified later), then set cond_met_ever to 1. Otherwise set
# cond_met_ever to 0
newdf[ldl >= threshold, cond_met_ever:=1]
newdf[ldl < threshold, cond_met_ever:=0]
} else{
# At subsequent time points, if cond_met_ever is still 0 but ldl
# newly goes above the threshold, then set cond_met_ever to 1
newdf[cond_met_ever==0 & ldl >= threshold, cond_met_ever:=1]
}
# Next, will assign values of statin_use to 0, unless cond_met_ever has
# a value of 1, at which point the participant can do whatever (i.e., follow
# their natural course)
newdf[cond_met_ever==0, (intvar):=0]
}
# Function for always take statins unless indicated
dynamic_always <- function(newdf, pool, intvar, intvals, time_name, t){
# First, need to create a variable that determines whether individual
# ever has alt_high=1 or ck_high=1. We'll do this by creating a time-updated
# variable called cond_met_ever (1: yes, 0: no)
if (t==0){
# At time 0, if alt_high=1 or ck_high=1, then set cond_met_ever to 1.
# Otherwise set cond_met_ever to 0
newdf[alt_high==1|ck_high==1, cond_met_ever:=1]
newdf[alt_high==0 & ck_high==0, cond_met_ever:=0]
} else{
# At subsequent time points, if cond_met_ever is still 0 but alt_high or
# ck_high newly takes on a value of 1, then set cond_met_ever to 1
newdf[cond_met_ever==0 & (alt_high==1|ck_high==1), cond_met_ever:=1]
}
# Next, will assign values of statin_use to 1, unless cond_met_ever has
# a value of 1, at which point the participant can do whatever (i.e., follow
# their natural course)
newdf[cond_met_ever==0, (intvar):=1]
}
# Specify both of the custom functions above in the list of interventions
interventions <- list(
# Strategy 1: never take statins
list(c(dynamic_never,  # type of strategy: dynamic_never
# (based on the custom function that we defined above)
190             # threshold value for LDL
# note: we could have specified the threshold within
# the function, but specifying it in this way allows
# us to use the same function under different thresholds
# (e.g., never take statins unless LDL >= 160 mg/dL)
)),
# Strategy 2: always take statins
list(c(dynamic_always))   # type of strategy: dynamic_always
# (based on the custom function that we defined above)
)
#################################################################################
###                                                                           ###
###     DATA ANALYSIS EXERCISE 2                                              ###
###                                                                           ###
#################################################################################
################################
### b) Specifying parameters for implementing parametric g-formula
censor_name <- "censor"
censor_model <- censor ~ age + sex + famhx_cvd + systolic + ldl + bmi +  aspirin_use + antiht_use + diabetes +healthcare_use + statin_use + time +alt_high + ck_high
my.time<-system.time(g.results.test <- gformula(
seed=54514,
# ----------------------------------------- #
# -- Dataset and participant identifiers -- #
# ----------------------------------------- #
obs_data=my.data,
id="id",
# ---------- #
# -- Time -- #
# ---------- #
time_name="time",
time_points=48,
# ------------- #
# -- Outcome -- #
# ------------- #
outcome_name="death",
outcome_type="survival",
ymodel=death ~ age + I(age^2) + sex + famhx_cvd +
statin_use*time + statin_use*I(time^2) +
lag1_statin_use +
systolic + I(systolic^2) + ldl + I(ldl^2) +
bmi + I(bmi^2) + aspirin_use + antiht_use +
healthcare_use + diabetes + alt_high + ck_high,
# ---------------- #
# -- Covariates -- #
# ---------------- #
# Time-fixed
basecovs=c("age", "sex", "famhx_cvd"),
# Time-varying
covnames=c(
"systolic", "ldl", "bmi",
"aspirin_use", "antiht_use", "healthcare_use",
"diabetes",
"alt_high", "ck_high", "statin_use"),
covtypes=c(
"normal", "normal", "normal",    # corresponding to systolic, ldl, and BMI
# continuous variables
# will be modeled using linear regression
"binary", "binary", "binary",    # corresponding to aspirin_use, antiht_use and healthcare_use
# binary variables
# will be modeled using logistic regression
"absorbing",                     # corresponding to diabetes
# similar to binary but if 1, then always 1
# at subsequent time points
# will be modeled using logistic regression
# if equal to 0 at previous time point
"binary", "binary", "binary"),   # Corresponding to alt_high, ck_high and statin_use
# binary variables
# will be modeled using logistic regression
histories=c(lagged),               # Created functions of history based on lagged values
histvars=list(c(                   # List of variables to created lagged versions
"systolic", "ldl", "bmi", "aspirin_use", "antiht_use",
"healthcare_use", "diabetes", "alt_high", "ck_high",
"statin_use")),
covparams=list(covmodels = c(      # Specify the models for each time-varying covariate
systolic ~ age + sex + famhx_cvd + time +
lag1_systolic  +
lag1_ldl  +
lag1_bmi  +
lag1_aspirin_use + lag1_antiht_use +
lag1_healthcare_use + lag1_diabetes +
lag1_alt_high + lag1_ck_high +
lag1_statin_use,
ldl ~ age +  sex + famhx_cvd + time +
lag1_systolic  +
lag1_ldl +
lag1_bmi +
lag1_aspirin_use + lag1_antiht_use +
lag1_healthcare_use + lag1_diabetes +
lag1_alt_high + lag1_ck_high +
lag1_statin_use,
bmi ~ age  + sex + famhx_cvd + time +
lag1_systolic +
lag1_ldl +
lag1_bmi +
lag1_aspirin_use + lag1_antiht_use +
lag1_healthcare_use + lag1_diabetes +
lag1_alt_high + lag1_ck_high +
lag1_statin_use,
aspirin_use ~ age  + sex + famhx_cvd + time +
lag1_systolic +
lag1_ldl +
lag1_bmi +
lag1_aspirin_use + lag1_antiht_use +
lag1_healthcare_use + lag1_diabetes +
lag1_alt_high + lag1_ck_high +
lag1_statin_use,
antiht_use ~ age + sex + famhx_cvd + time +
lag1_systolic +
lag1_ldl +
lag1_bmi +
lag1_aspirin_use + lag1_antiht_use +
lag1_healthcare_use + lag1_diabetes +
lag1_alt_high + lag1_ck_high +
lag1_statin_use,
healthcare_use ~ age +  sex + famhx_cvd + time +
lag1_systolic +
lag1_ldl +
lag1_bmi +
lag1_aspirin_use + lag1_antiht_use +
lag1_healthcare_use + lag1_diabetes +
lag1_alt_high + lag1_ck_high +
lag1_statin_use,
diabetes ~ age + sex + famhx_cvd + time +
lag1_systolic +
lag1_ldl +
lag1_bmi +
lag1_aspirin_use + lag1_antiht_use +
lag1_healthcare_use +
lag1_alt_high + lag1_ck_high +
lag1_statin_use,
alt_high ~ age + sex + famhx_cvd + time +
lag1_systolic +
lag1_ldl +
lag1_bmi +
lag1_aspirin_use + lag1_antiht_use +
lag1_healthcare_use + lag1_diabetes +
lag1_alt_high + lag1_ck_high +
lag1_statin_use,
ck_high ~ age + sex + famhx_cvd + time +
lag1_systolic +
lag1_ldl +
lag1_bmi +
lag1_aspirin_use + lag1_antiht_use +
lag1_healthcare_use + lag1_diabetes +
lag1_alt_high + lag1_ck_high +
lag1_statin_use,
statin_use ~ age +  sex + famhx_cvd +
time +  systolic +
ldl  + bmi +  aspirin_use + antiht_use +
healthcare_use + diabetes +
alt_high + ck_high + lag1_statin_use + lag2_statin_use
)),
# ------------------ #
# -- Intervention -- #
# ------------------ #
#intvars=list("statin_use", "statin_use"),       # Intervening on statin_use for both strategies
#interventions=interventions,                    # Use list of intervention that
# we specified in exercise 1
#int_descript=c("Never treat unless indicated", "Always treat unless indicated"),  # Description of strategies
ref_int=0,                                     # Use intervention 1 (i.e., "never treat")
# as the reference
# --------------- #
# -- Censoring -- #
# --------------- #
censor_name = "censor",
censor_model = censor_model,
# ------------------------------ #
# -- Bootstrapping parameters -- #
# ------------------------------ #
nsamples = 0,
# ----------- #
# -- Other -- #
# ----------- #
show_progress = F,
sim_data_b=F
)
)
print(my.time)
})
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
profvis({source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")})
p<-profvis({source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")})
p
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
source("C:/Users/roger/OneDrive - Harvard University/Gformula work/joyshi_test_call.R")
install.packages("devtools")
library(devtools)
load_all()
source("~/.active-rstudio-document")
View(known.histories)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
help("all.equal")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
View(check.lagged)
source("~/.active-rstudio-document")
known.histories[2]
known.histories[lagavg]
known.histories$lagavg()
known.histories$lagavg
View(my.histories)
length(my.histories)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
View(check.lagged)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
View(check.lagged)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
check.lagged
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
